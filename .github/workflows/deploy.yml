name: CI/CD

on:
  push:
    branches: [ "main" ]

  workflow_dispatch:

jobs:
  tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install ca-certificates curl gnupg
          sudo install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          sudo chmod a+r /etc/apt/keyrings/docker.gpg
          echo \
            "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
            "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Set up containers
        run: docker compose -f src/local.docker-compose.yaml up -d

      - name: Run Django tests
        run: |
          cd src;
          python manage.py test;


  deploy:
    runs-on: ubuntu-latest

    needs: tests

    steps:
      - name: Run command on remote server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PASSWORD }}
          script: |
            cd Training_portal;
            docker compose down;
            git checkout .;
            git pull;
            docker compose up --build -d;
            docker compose exec web python manage.py sup "${{ secrets.ADMINPASS }}";

  clean:
    needs: deploy
    runs-on: ubuntu-latest

    steps:
      - name: Clean docker garbage

        uses: appleboy/ssh-action@v1.0.0

        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PASSWORD }}
          script: docker system prune -af;
